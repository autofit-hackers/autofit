#pragma kernel LetterBoxImage
#pragma kernel PoseRegionUpdate
#pragma kernel CropImage
#pragma kernel PostProcess

#define PI 3.14159265359

#include "PoseRegion.cginc"
#include "LowPassFilter.cginc"
#include "Misc.cginc"
#include "Packages/jp.ikep.mediapipe.posedetection/ComputeShader/Common.cginc"


// Kernel 0
uint _letterboxWidth;
float2 _spadScale;
sampler2D _letterboxInput;
RWTexture2D<float4> _letterboxTexture;

// Generate letter-box image texture.
[numthreads(8, 8, 1)]
void LetterBoxImage(uint2 id : SV_DispatchThreadID)
{
    if (any(id > _letterboxWidth)) return;

    // UV coordinates
    float2 uv = (id + 0.5) / _letterboxWidth;

    // Scaling
    uv = (uv - 0.5) * _spadScale + 0.5;

    // UV gradients
    float2 duv_dx = float2(+1.0 / _letterboxWidth * _spadScale.x, 0);
    float2 duv_dy = float2(0, -1.0 / _letterboxWidth * _spadScale.y);

    // Texture sample
    float3 rgb = tex2Dgrad(_letterboxInput, uv, duv_dx, duv_dy).rgb;

    // Bounding
    rgb *= all(uv > 0) && all (uv < 1);

    _letterboxTexture[id] = float4(rgb, 1);
}


// Kernel 1
float _deltaTime;
uint _upperBodyOnly;
StructuredBuffer<PoseDetection> _poseDetections;
ByteAddressBuffer _poseDetectionCount;
RWStructuredBuffer<PoseRegion> _poseRegions;

// Update PoseRegion.
[numthreads(1, 1, 1)]
void PoseRegionUpdate(uint id : SV_DispatchThreadID)
{
    uint count = _poseDetectionCount.Load(0);
    if (count <= 0) return;

    // Get pose detection result by neural network model.
    const PoseDetection pd = _poseDetections[0];

    float2 hip = pd.keyPoints[0];
    float2 shoulder = pd.keyPoints[2];

    // Rotation center point
    float2 center = _upperBodyOnly ? shoulder : hip;
    float2 roi = _upperBodyOnly ? pd.keyPoints[3] : pd.keyPoints[1];

    // Image crop size
    float sizeX = abs(roi.x - center.x);
    float sizeY = abs(roi.y - center.y);
    float size = max(sizeX, sizeY) * 3.0;

    // Pose angle
    float target = PI * 0.5;
    const float2 up = shoulder - hip;
    float angle = atan2(-up.y, up.x) - target;

    center.y = 1 - center.y;
    PoseRegion pr = _poseRegions[0];

    // Low pass filter parameters and input vector
    const float3 lpf_params = float3(2, 1.5f, _deltaTime);
    // This frame region
    const float4 box = float4(center, size, angle);
    // Calculate PoseRegion delta with low pass filter for decrease jitter.
    pr.dBox = lpf_Step_dx(box, pr.box, pr.dBox, lpf_params);
    // Calculate PoseRegion with low pass filter for decrease jitter.
    pr.box = lpf_Step_x(box, pr.box, pr.dBox, lpf_params);

    // Region crop matrix update
    float4x4 m1 = makeTranslationMatrix(pr.box.xy - pr.box.z / 2);
    float4x4 m2 = makeScalingMatrix(pr.box.z);
    float4x4 m3 = makeTranslationMatrix(0.5);
    float4x4 m4 = makeRotationMatrix(pr.box.w);
    float4x4 m5 = makeTranslationMatrix(-0.5);
    pr.cropMatrix = mul(mul(mul(mul(m1, m2), m3), m4), m5);

    _poseRegions[0] = pr;
}


// Kernel 2
#define CROP_IMAGE_SIZE 256

sampler2D _inputTexture;
StructuredBuffer<PoseRegion> _cropRegion;
RWTexture2D<float4> _cropedTexture;

// Crop image from PoseRegion.
[numthreads(8, 8, 1)]
void CropImage(uint2 id : SV_DispatchThreadID)
{
    float4x4 xform = _cropRegion[0].cropMatrix;

    // UV coordinates
    float2 uv = (id + 0.5) / CROP_IMAGE_SIZE;
    uv = mul(xform, float4(uv, 0, 1)).xy;

    // De-letterboxing
    uv = (uv - 0.5) * _spadScale + 0.5;

    // UV gradients
    float2 duv_dx = mul(xform, float4(1.0 / CROP_IMAGE_SIZE, 0, 0, 0)).xy;
    float2 duv_dy = mul(xform, float4(0, -1.0 / CROP_IMAGE_SIZE, 0, 0)).xy;

    // Texture sample
    float3 rgb = tex2Dgrad(_inputTexture, uv, duv_dx, duv_dy).rgb;

    // Set pixel value.
    _cropedTexture[id] = float4(rgb, 1);
}


// Kernel 3
uint _keypointCount;
float _postDeltatime;

StructuredBuffer<float4> _postInput;
StructuredBuffer<float4> _postInputWorld;
StructuredBuffer<PoseRegion> _postRegion;

RWStructuredBuffer<float4> _postDeltaOutput;
RWStructuredBuffer<float4> _postOutput;
RWStructuredBuffer<float4> _postDeltaOutputWorld;
RWStructuredBuffer<float4> _postOutputWorld;

// Map pose landmark to cordinates on the original input image.
[numthreads(33 + 1, 1, 1)]
void PostProcess(uint id : SV_DispatchThreadID)
{
    if(id > _keypointCount) return;

    if(id == _keypointCount){
        // Set human exist score in last index.
        _postOutput[id] = _postInput[_keypointCount];
        _postOutputWorld[id] = _postInputWorld[_keypointCount];
    }
    else{
        // Process for normalized landmark
        PoseRegion region = _postRegion[0];
        // Visiblity of pose landmark
        float score = _postInput[id].w;
        // Pose landmark
        float3 x = _postInput[id].xyz;
        // Pose landmark on previous frame
        float3 p_x = _postOutput[id].xyz;
        // Pose landmark delta
        float3 p_dx = _postDeltaOutput[id].xyz;

        // Map to cordinates of letter-box image from croped image.
        x = mul(region.cropMatrix, float4(x, 1)).xyz;
        // Map to cordinates of original input image from letter-box image.
        x.xy = (x.xy - 0.5) * _spadScale + 0.5;

        // Calculate with low pass filter for decrease jitter.
        float3 lpf_params = float3(30, 1.5, _postDeltatime);
        float3 dx = lpf_Step_dx(x, p_x, p_dx, lpf_params);
        x = lpf_Step_x(x, p_x, dx, lpf_params);

        // Set pose landmark delta for the next frame processing.
        _postDeltaOutput[id] = float4(dx, 1);
        // Pose landmark final result
        _postOutput[id] = float4(x, score);

        // ---------

        // Process for world landmark
        // Visiblity of pose world landmark
        score = _postInputWorld[id].w;
        // Pose world landmark
        x = _postInputWorld[id].xyz;
        // Pose world landmark on previous frame
        p_x = _postOutputWorld[id].xyz;
        // Pose world landmark delta
        p_dx =_postDeltaOutputWorld[id].xyz;

        x = mul(makeRotationMatrix(region.box.w), float4(x, 1)).xyz;

        // Calculate with low pass filter for decrease jitter.
        dx = lpf_Step_dx(x, p_x, p_dx, lpf_params);
        x = lpf_Step_x(x, p_x, dx, lpf_params);

        // Set pose world landmark delta for the next frame processing.
        _postDeltaOutputWorld[id] = float4(dx, 1);
        // Pose world landmark final result
        _postOutputWorld[id] = float4(x, score);
    }
}
